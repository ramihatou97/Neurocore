name: Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # ==================== Backend Linting & Type Checking ====================
  backend-lint:
    name: Backend Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy

      - name: Run Black (code formatting check)
        run: black --check backend/

      - name: Run isort (import sorting check)
        run: isort --check-only --profile black backend/

      - name: Run Flake8 (linting)
        run: flake8 backend/ --max-line-length=100 --exclude=__pycache__,venv,migrations

      - name: Run MyPy (type checking)
        run: mypy backend/ --ignore-missing-imports --exclude=migrations
        continue-on-error: true  # Don't fail CI on type errors, just warn

  # ==================== Backend Testing ====================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: test_neurosurgery_kb
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev tesseract-ocr libtesseract-dev libgl1 libglib2.0-0

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          DB_HOST=localhost
          DB_PORT=5432
          DB_NAME=test_neurosurgery_kb
          DB_USER=test_user
          DB_PASSWORD=test_password
          REDIS_HOST=localhost
          REDIS_PORT=6379
          SECRET_KEY=test-secret-key-for-ci-only
          OPENAI_API_KEY=test-key
          DEBUG=true
          EOF

      - name: Run database migrations
        run: |
          cd backend
          python -m alembic upgrade head
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_neurosurgery_kb

      - name: Run tests with coverage
        run: |
          pytest backend/tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # ==================== Frontend Linting ====================
  frontend-lint:
    name: Frontend Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint
        continue-on-error: true

      - name: Check for console logs
        run: |
          cd frontend
          ! grep -r "console.log" src/ --include="*.jsx" --include="*.js" || echo "Warning: console.log found"
        continue-on-error: true

  # ==================== Frontend Testing ====================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

  # ==================== Frontend Build ====================
  frontend-build:
    name: Frontend Build Verification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build production bundle
        run: |
          cd frontend
          npm run build
        env:
          VITE_API_URL: http://localhost:8002

      - name: Check bundle size
        run: |
          cd frontend/dist
          du -sh .
          echo "Bundle contents:"
          ls -lh

  # ==================== Docker Build Test ====================
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend.production
          push: false
          tags: neurocore-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend.production
          push: false
          tags: neurocore-frontend:test
          build-args: |
            VITE_API_URL=http://localhost:8002
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==================== Security Scanning ====================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Run Safety (dependency vulnerability check)
        run: safety check --json
        continue-on-error: true

      - name: Run Bandit (security linting)
        run: bandit -r backend/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json
        if: always()

      - name: Run npm audit (frontend)
        run: |
          cd frontend
          npm audit --audit-level=moderate
        continue-on-error: true

  # ==================== Integration Summary ====================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [backend-lint, backend-test, frontend-lint, frontend-test, frontend-build, docker-build]

    steps:
      - name: CI Pipeline Passed
        run: |
          echo "✅ All CI checks passed successfully!"
          echo "Backend: Linting ✓ Tests ✓"
          echo "Frontend: Linting ✓ Tests ✓ Build ✓"
          echo "Docker: Build ✓"
