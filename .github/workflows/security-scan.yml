name: Security Audit

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [ main, develop ]
    paths:
      - 'requirements.txt'
      - 'frontend/package*.json'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ==================== Python Dependency Scanning ====================
  python-security:
    name: Python Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit pip-audit

      - name: Run Safety check
        run: |
          echo "## Python Dependency Vulnerabilities (Safety)" >> $GITHUB_STEP_SUMMARY
          safety check --json > safety-report.json || true
          safety check --output text || true
        continue-on-error: true

      - name: Run pip-audit
        run: |
          echo "## Python Dependency Vulnerabilities (pip-audit)" >> $GITHUB_STEP_SUMMARY
          pip-audit --format json > pip-audit-report.json || true
          pip-audit || true
        continue-on-error: true

      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json
        if: always()

      - name: Upload pip-audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit-report.json
        if: always()

  # ==================== Python Code Security Analysis ====================
  bandit-scan:
    name: Python Code Security (Bandit)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Bandit
        run: pip install bandit[toml]

      - name: Run Bandit security linter
        run: |
          echo "## Python Code Security Issues (Bandit)" >> $GITHUB_STEP_SUMMARY
          bandit -r backend/ -f json -o bandit-report.json || true
          bandit -r backend/ -f txt || true
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
        if: always()

  # ==================== Frontend Dependency Scanning ====================
  npm-security:
    name: Frontend Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run npm audit
        run: |
          cd frontend
          echo "## Frontend Dependency Vulnerabilities (npm audit)" >> $GITHUB_STEP_SUMMARY
          npm audit --json > npm-audit-report.json || true
          npm audit || true
        continue-on-error: true

      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: frontend/npm-audit-report.json
        if: always()

  # ==================== Docker Image Scanning ====================
  docker-security:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend.production
          push: false
          load: true
          tags: neurocore-backend:scan

      - name: Run Trivy vulnerability scanner (backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: neurocore-backend:scan
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy results (backend)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-backend-results.sarif'
          category: 'trivy-backend'
        if: always()

      - name: Build frontend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend.production
          push: false
          load: true
          tags: neurocore-frontend:scan

      - name: Run Trivy vulnerability scanner (frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: neurocore-frontend:scan
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy results (frontend)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-frontend-results.sarif'
          category: 'trivy-frontend'
        if: always()

  # ==================== Code Security Analysis ====================
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # ==================== Secret Scanning ====================
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for secret scanning

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true

      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
        if: always()

  # ==================== License Compliance ====================
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-licenses

      - name: Generate Python license report
        run: |
          echo "## Python Package Licenses" >> $GITHUB_STEP_SUMMARY
          pip-licenses --format=markdown >> $GITHUB_STEP_SUMMARY
          pip-licenses --format=json > python-licenses.json

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate Frontend license report
        run: |
          cd frontend
          npm ci
          npx license-checker --json > ../frontend-licenses.json
          echo "## Frontend Package Licenses" >> $GITHUB_STEP_SUMMARY
          npx license-checker --summary >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            python-licenses.json
            frontend-licenses.json
        if: always()

  # ==================== Security Summary ====================
  security-summary:
    name: Security Audit Summary
    runs-on: ubuntu-latest
    needs: [python-security, bandit-scan, npm-security, docker-security, codeql-analysis, secret-scan, license-check]
    if: always()

    steps:
      - name: Generate security summary
        run: |
          echo "# 🔒 Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Python Dependencies | ${{ needs.python-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Code Security | ${{ needs.bandit-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Dependencies | ${{ needs.npm-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Images | ${{ needs.docker-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Detection | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Review detailed reports in the Actions artifacts**" >> $GITHUB_STEP_SUMMARY

      - name: Create issue for critical vulnerabilities
        if: needs.docker-security.result == 'failure' || needs.secret-scan.result == 'failure'
        run: |
          echo "⚠️ Critical security issues detected!"
          echo "Please review the security scan results and create an issue if needed."
          # Optionally create a GitHub issue automatically
          # gh issue create --title "Security Vulnerabilities Detected" --body "..."

      # Optional: Send notification
      # - name: Send security alert
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: custom
      #     custom_payload: |
      #       {
      #         text: "Security Audit Complete",
      #         attachments: [{
      #           color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
      #           text: 'Security scan results available'
      #         }]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
