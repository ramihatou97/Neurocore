# Promtail Configuration for Log Shipping
# Collects logs from Docker containers and ships to Loki

server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: info

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push
    batchwait: 1s
    batchsize: 1048576
    timeout: 10s

scrape_configs:
  # ==================== Docker Container Logs ====================
  - job_name: docker
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          __path__: /var/lib/docker/containers/*/*log

    # Pipeline stages for parsing Docker logs
    pipeline_stages:
      # Parse JSON logs from Docker
      - json:
          expressions:
            output: log
            stream: stream
            time: time
            container_name: attrs.name
            container_id: attrs.id

      # Extract timestamp
      - timestamp:
          source: time
          format: RFC3339Nano

      # Add labels
      - labels:
          stream:
          container_name:

      # Extract log level if present
      - regex:
          expression: '(?P<level>DEBUG|INFO|WARNING|ERROR|CRITICAL)'
          source: output

      - labels:
          level:

      # Output the log message
      - output:
          source: output

  # ==================== Neurocore API Logs ====================
  - job_name: neurocore-api
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: [neurocore_api]

    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container'
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'stream'

    pipeline_stages:
      - json:
          expressions:
            level: level
            timestamp: timestamp
            logger: logger
            message: message
            request_id: request_id

      - labels:
          level:
          logger:

      - timestamp:
          source: timestamp
          format: RFC3339

      - output:
          source: message

  # ==================== Postgres Logs ====================
  - job_name: postgres
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: [neurocore_postgres]

    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container'

    pipeline_stages:
      - regex:
          expression: '(?P<timestamp>[\d-]+ [\d:\.]+) (?P<timezone>\w+) \[(?P<pid>\d+)\] (?P<level>\w+):\s+(?P<message>.*)'

      - labels:
          level:
          pid:

      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05.000'

      - output:
          source: message

  # ==================== Redis Logs ====================
  - job_name: redis
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: [neurocore_redis]

    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container'

    pipeline_stages:
      - regex:
          expression: '(?P<pid>\d+):\w+ (?P<timestamp>[\d\s\w:]+) (?P<level>[*#\-\.]) (?P<message>.*)'

      - labels:
          level:
          pid:

      - output:
          source: message

  # ==================== Celery Worker Logs ====================
  - job_name: celery-worker
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: [neurocore_celery_worker]

    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container'

    pipeline_stages:
      - regex:
          expression: '\[(?P<timestamp>[\d\-\s:,]+)\] \[(?P<level>\w+)\] (?P<message>.*)'

      - labels:
          level:

      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05,000'

      - output:
          source: message

  # ==================== Nginx Logs ====================
  - job_name: nginx
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: [neurocore_frontend]

    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container'

    pipeline_stages:
      # Parse Nginx access logs
      - regex:
          expression: '(?P<remote_addr>[\d\.]+) - (?P<remote_user>[^ ]+) \[(?P<time_local>[^\]]+)\] "(?P<method>\w+) (?P<request>[^ ]+) (?P<protocol>[^"]+)" (?P<status>\d+) (?P<body_bytes_sent>\d+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)"'

      - labels:
          method:
          status:

      - timestamp:
          source: time_local
          format: '02/Jan/2006:15:04:05 -0700'

  # ==================== System Logs ====================
  - job_name: syslog
    static_configs:
      - targets:
          - localhost
        labels:
          job: syslog
          __path__: /var/log/syslog

    pipeline_stages:
      - regex:
          expression: '(?P<timestamp>[\w\s:]+) (?P<hostname>[\w\-]+) (?P<process>[\w\[\]]+): (?P<message>.*)'

      - labels:
          hostname:
          process:

      - output:
          source: message

  # ==================== Application Error Logs ====================
  - job_name: app-errors
    static_configs:
      - targets:
          - localhost
        labels:
          job: app-errors
          severity: error
          __path__: /var/log/neurocore/errors.log

    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            traceback: traceback
            request_id: request_id

      - labels:
          level:

      - timestamp:
          source: timestamp
          format: RFC3339

      - output:
          source: message

# Limits
limits_config:
  readline_rate: 10000
  readline_burst: 20000
  readline_rate_enabled: true
  readline_rate_drop: false
