"""
Chapter API routes for generation and management
"""

from typing import List, Optional
from fastapi import APIRouter, Depends, Query, status
from pydantic import BaseModel, Field
from sqlalchemy.orm import Session

from backend.database import get_db, User
from backend.services.chapter_service import ChapterService
from backend.utils import get_logger, get_current_active_user

logger = get_logger(__name__)

# Create router
router = APIRouter(prefix="/chapters", tags=["chapters"])


# ==================== Request/Response Models ====================

class ChapterCreateRequest(BaseModel):
    """Request model for chapter creation"""
    topic: str = Field(..., min_length=3, description="Chapter topic or query")
    chapter_type: Optional[str] = Field(None, description="Chapter type (surgical_disease, pure_anatomy, surgical_technique)")

    class Config:
        json_schema_extra = {
            "example": {
                "topic": "Management of traumatic brain injury",
                "chapter_type": "surgical_disease"
            }
        }


class ChapterResponse(BaseModel):
    """Response model for chapter information"""
    id: str
    title: str
    chapter_type: Optional[str]
    generation_status: str
    author_id: str
    version: Optional[str]
    is_current_version: bool
    depth_score: Optional[float]
    coverage_score: Optional[float]
    evidence_score: Optional[float]
    currency_score: Optional[float]
    total_sections: Optional[int]
    total_words: Optional[int]
    generation_cost_usd: Optional[float]
    created_at: str
    updated_at: str

    class Config:
        json_schema_extra = {
            "example": {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "title": "Management of traumatic brain injury",
                "chapter_type": "surgical_disease",
                "generation_status": "completed",
                "author_id": "user-123",
                "version": "1.0",
                "is_current_version": True,
                "depth_score": 0.85,
                "coverage_score": 0.90,
                "evidence_score": 0.88,
                "currency_score": 0.75,
                "total_sections": 7,
                "total_words": 2500,
                "generation_cost_usd": 0.45,
                "created_at": "2025-10-27T12:00:00",
                "updated_at": "2025-10-27T12:10:00"
            }
        }


class ChapterDetailResponse(ChapterResponse):
    """Detailed response model including sections"""
    sections: Optional[List[dict]] = None
    references: Optional[List[dict]] = None
    structure_metadata: Optional[dict] = None


class ChapterStatisticsResponse(BaseModel):
    """Response model for chapter statistics"""
    total_chapters: int
    completed: int
    failed: int
    in_progress: int
    average_depth_score: float
    completion_rate: float


class MessageResponse(BaseModel):
    """Generic message response"""
    message: str
    details: Optional[dict] = None


# ==================== Health Check (must be before dynamic routes) ====================

@router.get(
    "/health",
    response_model=MessageResponse,
    summary="Chapter service health check"
)
async def chapter_health_check() -> MessageResponse:
    """
    Health check endpoint for chapter service

    No authentication required.
    """
    return MessageResponse(message="Chapter service is healthy")


# ==================== Chapter Routes ====================

@router.post(
    "",
    response_model=ChapterResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Generate a new chapter",
    description="""
    Generate a new neurosurgery chapter using the 14-stage workflow.

    The generation process includes:
    1. Topic validation and analysis
    2. Context building
    3. Internal research (indexed PDFs)
    4. External research (PubMed)
    5. Content synthesis planning
    6. Section generation with AI
    7. Image integration
    8. Citation network building
    9. Quality assurance
    10. Fact-checking
    11. Formatting
    12. Review and refinement
    13. Finalization
    14. Delivery

    This is an async operation that may take several minutes.
    """
)
async def create_chapter(
    request: ChapterCreateRequest,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> ChapterResponse:
    """
    Generate new chapter

    Requires authentication.
    """
    chapter_service = ChapterService(db)

    try:
        chapter = await chapter_service.create_chapter(
            topic=request.topic,
            user=current_user,
            chapter_type=request.chapter_type
        )

        logger.info(f"Chapter generated by user {current_user.email}: {chapter.id}")

        return ChapterResponse(**chapter.to_dict())

    except Exception as e:
        logger.error(f"Chapter creation failed: {str(e)}", exc_info=True)
        raise


@router.get(
    "",
    response_model=List[ChapterResponse],
    summary="List chapters",
    description="List all chapters with optional filtering by type and status"
)
async def list_chapters(
    chapter_type: Optional[str] = Query(None, description="Filter by chapter type"),
    status: Optional[str] = Query(None, description="Filter by generation status"),
    skip: int = Query(0, ge=0, description="Number of records to skip"),
    limit: int = Query(100, ge=1, le=500, description="Maximum number of records"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> List[ChapterResponse]:
    """
    List chapters with filtering

    Requires authentication.
    """
    chapter_service = ChapterService(db)

    chapters = chapter_service.list_chapters(
        user_id=None,  # Show all chapters (could filter by user)
        chapter_type=chapter_type,
        status=status,
        skip=skip,
        limit=limit
    )

    return [ChapterResponse(**chapter.to_dict()) for chapter in chapters]


@router.get(
    "/mine",
    response_model=List[ChapterResponse],
    summary="Get my chapters",
    description="Get all chapters created by the current user"
)
async def get_my_chapters(
    include_draft: bool = Query(True, description="Include chapters in progress"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> List[ChapterResponse]:
    """
    Get current user's chapters

    Requires authentication.
    """
    chapter_service = ChapterService(db)

    chapters = chapter_service.get_user_chapters(
        user_id=str(current_user.id),
        include_draft=include_draft
    )

    return [ChapterResponse(**chapter.to_dict()) for chapter in chapters]


@router.get(
    "/statistics",
    response_model=ChapterStatisticsResponse,
    summary="Get chapter statistics",
    description="Get overall chapter generation statistics"
)
async def get_statistics(
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> ChapterStatisticsResponse:
    """
    Get chapter statistics

    Requires authentication.
    """
    chapter_service = ChapterService(db)

    stats = chapter_service.get_chapter_statistics()

    return ChapterStatisticsResponse(**stats)


@router.get(
    "/search",
    response_model=List[ChapterResponse],
    summary="Search chapters",
    description="Search chapters by title or content"
)
async def search_chapters(
    q: str = Query(..., min_length=2, description="Search query"),
    max_results: int = Query(20, ge=1, le=100, description="Maximum number of results"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> List[ChapterResponse]:
    """
    Search chapters

    Requires authentication.
    """
    chapter_service = ChapterService(db)

    chapters = chapter_service.search_chapters(
        query=q,
        max_results=max_results
    )

    return [ChapterResponse(**chapter.to_dict()) for chapter in chapters]


@router.get(
    "/{chapter_id}",
    response_model=ChapterDetailResponse,
    summary="Get chapter details",
    description="Get detailed information about a specific chapter including sections and references"
)
async def get_chapter(
    chapter_id: str,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> ChapterDetailResponse:
    """
    Get chapter by ID

    Requires authentication.
    """
    chapter_service = ChapterService(db)

    chapter = chapter_service.get_chapter(chapter_id)

    return ChapterDetailResponse(**chapter.to_dict())


@router.get(
    "/{chapter_id}/versions",
    response_model=List[ChapterResponse],
    summary="Get chapter versions",
    description="Get all versions of a chapter"
)
async def get_chapter_versions(
    chapter_id: str,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> List[ChapterResponse]:
    """
    Get all versions of a chapter

    Requires authentication.
    """
    chapter_service = ChapterService(db)

    versions = chapter_service.get_chapter_versions(chapter_id)

    return [ChapterResponse(**v.to_dict()) for v in versions]


@router.get(
    "/{chapter_id}/export",
    summary="Export chapter as markdown",
    description="Export chapter in markdown format for download"
)
async def export_chapter(
    chapter_id: str,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> dict:
    """
    Export chapter as markdown

    Requires authentication.
    """
    chapter_service = ChapterService(db)

    markdown = chapter_service.export_chapter_markdown(chapter_id)

    return {
        "chapter_id": chapter_id,
        "format": "markdown",
        "content": markdown
    }


@router.post(
    "/{chapter_id}/regenerate",
    response_model=ChapterResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Regenerate chapter",
    description="Create a new version of an existing chapter with updated research"
)
async def regenerate_chapter(
    chapter_id: str,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> ChapterResponse:
    """
    Regenerate chapter (create new version)

    Requires authentication.
    """
    chapter_service = ChapterService(db)

    new_chapter = await chapter_service.regenerate_chapter(
        chapter_id=chapter_id,
        user=current_user
    )

    logger.info(f"Chapter regenerated by user {current_user.email}: {new_chapter.id}")

    return ChapterResponse(**new_chapter.to_dict())


@router.delete(
    "/{chapter_id}",
    response_model=MessageResponse,
    summary="Delete chapter",
    description="Delete a chapter and all its data"
)
async def delete_chapter(
    chapter_id: str,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> MessageResponse:
    """
    Delete chapter

    Requires authentication.
    """
    chapter_service = ChapterService(db)

    result = chapter_service.delete_chapter(chapter_id)

    logger.info(f"Chapter deleted by user {current_user.email}: {chapter_id}")

    return MessageResponse(
        message=f"Chapter deleted successfully",
        details=result
    )
